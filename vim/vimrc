" Forget compatibility with VI 
set nocompatible

"----------------------"
" Encoding {{{
"----------------------"
if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8
  setglobal fileencoding=utf-8
  "setglobal bomb
  set fileencodings=ucs-bom,utf-8,latin1
endif
" }}}


"----------------------"
" Filetype {{{
"----------------------"
filetype off
filetype indent on
filetype plugin on
syntax on
" }}}


"-----------------------------"
" Abbreviations and Shortcuts {{{
"-----------------------------"
" Override <leader> defaults
let mapleader = ","
let maplocalleader = ","
" Lower the timeout after typing the leader key + command
set timeoutlen=500

" ABBREVIATIONS - commands typed in CLI (after colon)
" -------------------------------
" Open current file in Firefox - syntax may differ from one OS to another
abbrev ff :!firefox % &<cr>

" IMAPS - Insert mode shortcuts
" -------------------------------
" Shortcut for ESC
imap jj <esc>

" NMAPS - Normal Mode shortcuts
" -------------------------------
" let semi-colon function as colon (switch to command mode)
nmap ; :
" fast .VIMRC edit
nmap <leader>ev :tabedit $MYVIMRC<cr>
" reload .VIMRC without restarting VIM
nmap <leader>so :so $MYVIMRC<cr>
" Quickly cancel highlighted selection
nmap <leader>h :nohlsearch<cr>
" Reload files
nmap <leader>r :checktime<cr>

" Disable arrow keys to improve moving around with h,j,k,l
" Taken from http://bit.ly/10Fvzgn
inoremap <Up> <NOP>
vnoremap <Up> <NOP>
inoremap <Down> <NOP>
vnoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>
vnoremap <Left> <NOP>
vnoremap <Right> <NOP>
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>
" B-A-<start> almost a Konami code:)

" Override read-only permissions with sudo password
cmap w!! %!sudo tee > /dev/null %

" Prevent from entering Ex mode
nnoremap Q <nop>

map <Leader>p :set paste<CR>o<ESC>"*]p:set nopaste<CR>

" }}}


"----------------------"
" Files & Buffers {{{
"----------------------"
" Write the old file when switching between files
set autowrite
" Switch between buffers without saving
set hidden
" No swap files
set noswapfile
" File names auto-completion
"   first TAB completes as much as possible
"   second TAB provides a list
"   third and subsequent will cycle through completion options
set wildmode=longest,list,full
set wildmenu
" Apply new configuration after .VIMRC is saved
autocmd! bufwritepost .vimrc source %
" Automatically change current directory to that of the file in the buffer
autocmd BufEnter * silent! lcd %:p:h " Better alternative to `autochdir`
" Custom Filetypes
au BufNewFile,BufRead *.less, set filetype=css " Recognize .less files as .css
au BufNewFile,BufRead *.scss set filetype=css " Recognize .scss files as .css
" Shortcut for deleting all buffers
nmap <silent> <leader>da :exec "1," . bufnr('$') . "bd"<cr>
" Force spell check when writing a git commit
" source: https://coderwall.com/p/kxps6g
if  bufname("%")=="COMMIT_EDITMSG"
  set spell 
  set spelllang=en
endif
" }}}


"----------------------"
" UI stuff {{{
"----------------------"
set t_Co=256 " Enable 256 colors mode
" Select colorscheme from ~/.vim/colors/
if has('gui_running')
  colorscheme solarized
  set background=dark " Used by some colorschemes (for example Solarized theme may be 'dark' or 'light')
else
  colorscheme dante
endif
" Show lines numbers
set number
" show whitespace characters (tabs and line endings)
set list
" customize the way whitespace characters are shown
set listchars=nbsp:¬,eol:¶,tab:>-,extends:»,precedes:«,trail:•
"set relativenumber " Relative line numbering, works in VIM version 7.3 and higher
set linespace=3 " Higher line height - works only in GUI mode, not in terminal..
set laststatus=2 " Show status line
" Customize statusline: [Filename] [Filetype] [GIT] [Cursor Line,Column]
set statusline=%t\ %y\ %{fugitive#statusline()}\ [%l,%c]
" Show additional helpful info (like number of selected lines) in the bottom right of the screen
set showcmd
" Keep current screen unmoved when creating new split screen
set splitbelow
set splitright
" Highlight the paired characters if one of them is under the cursor (like
" braces)
set showmatch
" Ignore case sensitivity when searching
set ignorecase
" Don't ignore case sensitivity when search pattern contains capital letters
set smartcase
" Add /g flag in search and replace by default
set gdefault
" Set incremental search - search when you type, very cool
set incsearch
" Highlight search - looks like it is enabled by default, but anyways
set hlsearch " use :nohlsearch to cancel highlighted selection
" Hide mouse when typing
set mousehide
" Let mouse text selecting be aware of splits so that only text in
" current split is selected
set mouse=a
" Flash screen instead of beeping
set visualbell
" Highlight current line
set cursorline
" Have some lines above/below the cursor when hitting the top or the bottom
" edge of the screen while scrolling
" source: https://coderwall.com/p/m6zz_w
set scrolloff=5

" Set font for graphical vim
set guifont=Monaco:h18
" Remove all toolbars/scrollbars from GUI version
set guioptions=aAc
set guioptions-=Be
set guioptions-=T
" Non-blinking, block cursor
set guicursor=a:blinkwait0,a:block-cursor

" Resize windows when switching between them
set winwidth=84
set winheight=5
set winminheight=5
set winheight=999
" }}}


"----------------------"
" Indentation & Wrap {{{
"----------------------"
set backspace=2 " make backspace work like most other apps
" make sure we can navigate very long lines as expected
nnoremap j gj
nnoremap k gk
" make sure we can indent blocks easily, enter Visual mode, select text block
" and press '>' and '<' as much as you need to indent it
vnoremap < <gv
vnoremap > >gv
" Hard-wrap paragraphs of text - very useful when pasting long lines
nnoremap <leader>q gqip
" Indentation
" Insert space characters whenever TAB pressed (use Ctrl-V<Tab> to insert real TAB)
set expandtab 
set tabstop=2 " number of spaces when TAB pressed
set shiftwidth=2
set softtabstop=2
set expandtab
set smartindent
set autoindent
" Line wrapping
set wrap
set textwidth=79
set formatoptions=cqtl
set wrapmargin=0
set linebreak
" }}}


"----------------------"
" Folding {{{
"----------------------"
set foldenable
" Use fold-marker method
set foldmethod=marker
set foldmarker={{{,}}}
set foldtext=getline(v:foldstart)
" Save only fold info in views
set viewoptions=folds
" Auto-save the folds when saving file
au BufWinLeave * silent! mkview
" Auto-load the fold when opening file
au BufWinEnter * silent! loadview
" Fold GPG entries by default
autocmd BufWinEnter,BufReadPre,FileReadPre      *.gpg normal zM
" Don't screw up folds when inserting text that might affect them, until
" leaving insert mode. Foldmethod is local to the window.
autocmd InsertEnter * let w:last_fdm=&foldmethod | setlocal foldmethod=manual
autocmd InsertLeave * let &l:foldmethod=w:last_fdm
" }}}


"----------------------"
" Code completion {{{
"----------------------"
imap <S-x> <C-n>
imap <S-z> <C-p>
imap <S-Tab> <C-x><C-o>
" Emmet plugin mapping
" http://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE
" set completeopt=longest,menuone
" inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
"   \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
" inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
"   \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
" }}}


"---------------------------"
" Vundle - Plugins manager {{{
"---------------------------"
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required! 
Bundle 'gmarik/vundle'

"
" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install (update) bundles
" :BundleSearch(!) foo - search (or refresh cache first) for foo
" :BundleClean(!)      - confirm (or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle commands are not allowed.
" }}}

"---------------------------"
" Vundles {{{
"---------------------------"

" Neat theme
Bundle 'dracula/vim'
color dracula

Bundle 'tobyS/vmustache'
Bundle 'evidens/vim-twig'

Bundle 'SirVer/ultisnips'
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsListSnippets="<c-t>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

Bundle 'tobyS/pdv'
let g:pdv_template_dir = $HOME ."/.vim/bundle/pdv/templates_snip"
" nnoremap <buffer> <C-p> :call pdv#DocumentWithSnip()<CR>

" PHP-CS-Fixer VIM plugin
" Correct visual representation of code according to PSR standards
"
" To activate press <leader>pcd
"
" For more details:
" https://github.com/stephpy/vim-php-cs-fixer
"
Bundle 'stephpy/vim-php-cs-fixer'
" Change default mapping to <leader>ff and <leader>fd
let g:php_cs_fixer_enable_default_mapping = 0
nnoremap <silent><leader>fd :call PhpCsFixerFixDirectory()<CR>
nnoremap <silent><leader>ff :call PhpCsFixerFixFile()<CR>

" React JSX syntax highlight
Bundle 'pangloss/vim-javascript'
Bundle 'mxw/vim-jsx'
let g:jsx_ext_required = 0
" }}}




"---------------------------"
" Pathogen - Plugins manager {{{
"---------------------------"

 " call pathogen#infect()
 " filetype off
 " syntax on
 " filetype plugin indent on
call pathogen#infect()
" }}}

"----------------------"
" PLUGIN - CtrlP {{{
"----------------------"
let g:ctrlp_map = '<C-p>'
let g:ctrlp_cmd = 'CtrlP'
" }}}


"----------------------"
" PLUGIN - NERDTree {{{
"----------------------"
let NERDTreeChDirMode=2
let NERDTreeIgnore=['\env','\.vim$', '\~$', '\.pyc$', '\.swp$', '\.egg-info$', '^dist$', '^build$']
let NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\~$']
let NERDTreeShowBookmarks=1
let NERDTreeHightlightCursorline=1
let NERDTreeShowHidden=1 " Show hidden files
" Map NERDTreeToggle to convenient key
nmap <leader>n :NERDTreeToggle<cr>
" }}}

"----------------------"
" PLUGIN - vim-jsx {{{
"----------------------"
" Enable JSX syntax highlighting in .js files as well as in .jsx files
let g:jsx_ext_required = 0
" }}}

"----------------------"
" PLUGIN - Sparkup (zencoding) {{{
"----------------------"
let g:sparkup = 'sparkup'
let g:sparkupArgs = '--no-last-newline'
let g:sparkupExecuteMapping = '<leader>e'
let g:sparkupNextMapping = '<C-n>'
" }}}

"----------------------"
" PLUGIN - tComment {{{
"----------------------"
map <leader>c <C-_><C-_>
" }}}

"----------------------"
" PLUGIN - taglist {{{
"----------------------"
let Tlist_Ctags_Cmd='/usr/local/bin/ctags'
let Tlist_Inc_Winwidth=0
" }}}

"----------------------"
" PLUGIN - RSpec {{{
"----------------------"
map <leader>s :RunSpec<cr>
" }}}

"----------------------"
" Markdown {{{
"----------------------"
" Markdown to HTML - make sure to download Markdown.pl to /usr/local/bin
nmap <leader>md :%!/usr/local/bin/Markdown.pl --html4tags<cr>
" }}}


" Any local customizations should be made in .vimrc.local file
" you would most likely create .vimrc.local in the same dir with your $MYVIMRC file
let $VIMHOME=expand('<sfile>:p:h')
if filereadable(expand('$VIMHOME/.vimrc.local'))
  source $VIMHOME/.vimrc.local
endif

